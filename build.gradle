plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.9.24'
    id 'org.springframework.boot' version '3.3.1'
    id 'org.jetbrains.kotlin.plugin.spring' version '2.0.20'
    id 'jacoco'
}

repositories {
    maven {
        url uri('lib')
    }
    mavenLocal()
    mavenCentral()
}

jacocoTestReport {
    dependsOn test
    reports {
        csv.required = true
    }
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-web:3.4.4"
    implementation "org.springframework.boot:spring-boot-starter-actuator:3.4.4"
    implementation "org.springframework.boot:spring-boot-starter-graphql:3.4.4"
    implementation 'org.jetbrains.kotlin:kotlin-reflect:1.9.24'
    implementation 'javax.validation:validation-api:2.0.1.Final'

    testImplementation "org.springframework.boot:spring-boot-starter-test:3.4.4"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.1'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'

    testImplementation "io.specmatic:junit5-support:${specmaticVersion}"
    testImplementation "io.specmatic.graphql:specmatic-graphql-min:${specmaticGraphqlVersion}"
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
        exceptionFormat = 'full'
    }

    afterSuite { desc, result ->
        if (!desc.parent) {
            def resultLine = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            def lineLength = resultLine.length()
            def separator = "-" * lineLength

            println separator
            println resultLine
            println separator
        }
    }
}

group = 'in.specmatic.sample'
version = '1.0'

configurations {
    configureEach {
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
    }
}
